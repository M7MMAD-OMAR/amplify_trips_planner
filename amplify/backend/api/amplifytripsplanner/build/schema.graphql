type Trip {
    id: ID!
    tripName: String!
    destination: String!
    startDate: AWSDate!
    endDate: AWSDate!
    tripImageUrl: String
    tripImageKey: String
    Activities(activityName: ModelStringKeyConditionInput, filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    _version: Int!
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
    owner: String
}

type Activity {
    id: ID!
    activityName: String!
    tripID: ID!
    trip: Trip!
    activityImageUrl: String
    activityImageKey: String
    activityDate: AWSDate!
    activityTime: AWSTime
    category: ActivityCategory!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    _version: Int!
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
    owner: String
}

enum ActivityCategory {
    Flight
    Lodging
    Meeting
    Restaurant
}

input ModelStringInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTripConnection {
  items: [Trip]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTripFilterInput {
  id: ModelIDInput
  tripName: ModelStringInput
  destination: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  tripImageUrl: ModelStringInput
  tripImageKey: ModelStringInput
  and: [ModelTripFilterInput]
  or: [ModelTripFilterInput]
  not: ModelTripFilterInput
}

type Query {
    getTrip(id: ID!): Trip
    listTrips(filter: ModelTripFilterInput, limit: Int, nextToken: String): ModelTripConnection
    syncTrips(filter: ModelTripFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTripConnection
    getActivity(id: ID!): Activity
    listActivities(filter: ModelActivityFilterInput, limit: Int, nextToken: String): ModelActivityConnection
    syncActivities(filter: ModelActivityFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelActivityConnection
}

input ModelTripConditionInput {
  tripName: ModelStringInput
  destination: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  tripImageUrl: ModelStringInput
  tripImageKey: ModelStringInput
  and: [ModelTripConditionInput]
  or: [ModelTripConditionInput]
  not: ModelTripConditionInput
}

input CreateTripInput {
  id: ID
  tripName: String!
  destination: String!
  startDate: AWSDate!
  endDate: AWSDate!
  tripImageUrl: String
  tripImageKey: String
  _version: Int
}

input UpdateTripInput {
  id: ID!
  tripName: String
  destination: String
  startDate: AWSDate
  endDate: AWSDate
  tripImageUrl: String
  tripImageKey: String
  _version: Int
}

input DeleteTripInput {
  id: ID!
  _version: Int
}

type Mutation {
    createTrip(input: CreateTripInput!, condition: ModelTripConditionInput): Trip
    updateTrip(input: UpdateTripInput!, condition: ModelTripConditionInput): Trip
    deleteTrip(input: DeleteTripInput!, condition: ModelTripConditionInput): Trip
    createActivity(input: CreateActivityInput!, condition: ModelActivityConditionInput): Activity
    updateActivity(input: UpdateActivityInput!, condition: ModelActivityConditionInput): Activity
    deleteActivity(input: DeleteActivityInput!, condition: ModelActivityConditionInput): Activity
}

input ModelSubscriptionTripFilterInput {
  id: ModelSubscriptionIDInput
  tripName: ModelSubscriptionStringInput
  destination: ModelSubscriptionStringInput
  startDate: ModelSubscriptionStringInput
  endDate: ModelSubscriptionStringInput
    tripImageUrl: ModelSubscriptionStringInput
    tripImageKey: ModelSubscriptionStringInput
    and: [ModelSubscriptionTripFilterInput]
    or: [ModelSubscriptionTripFilterInput]
}

type Subscription {
    onCreateTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["createTrip"])
    onUpdateTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["updateTrip"])
    onDeleteTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["deleteTrip"])
    onCreateActivity(filter: ModelSubscriptionActivityFilterInput, owner: String): Activity @aws_subscribe(mutations: ["createActivity"])
    onUpdateActivity(filter: ModelSubscriptionActivityFilterInput, owner: String): Activity @aws_subscribe(mutations: ["updateActivity"])
    onDeleteActivity(filter: ModelSubscriptionActivityFilterInput, owner: String): Activity @aws_subscribe(mutations: ["deleteActivity"])
}

type ModelActivityConnection {
    items: [Activity]!
    nextToken: String
    startedAt: AWSTimestamp
}

input ModelActivityCategoryInput {
    eq: ActivityCategory
    ne: ActivityCategory
}

input ModelActivityFilterInput {
    id: ModelIDInput
    activityName: ModelStringInput
    tripID: ModelIDInput
    activityImageUrl: ModelStringInput
    activityImageKey: ModelStringInput
    activityDate: ModelStringInput
    activityTime: ModelStringInput
    category: ModelActivityCategoryInput
    and: [ModelActivityFilterInput]
    or: [ModelActivityFilterInput]
    not: ModelActivityFilterInput
}

input ModelActivityConditionInput {
    activityName: ModelStringInput
    tripID: ModelIDInput
    activityImageUrl: ModelStringInput
    activityImageKey: ModelStringInput
    activityDate: ModelStringInput
    activityTime: ModelStringInput
    category: ModelActivityCategoryInput
    and: [ModelActivityConditionInput]
    or: [ModelActivityConditionInput]
    not: ModelActivityConditionInput
}

input CreateActivityInput {
    id: ID
    activityName: String!
    tripID: ID!
    activityImageUrl: String
    activityImageKey: String
    activityDate: AWSDate!
    activityTime: AWSTime
    category: ActivityCategory!
    _version: Int
}

input UpdateActivityInput {
    id: ID!
    activityName: String
    tripID: ID
    activityImageUrl: String
    activityImageKey: String
    activityDate: AWSDate
    activityTime: AWSTime
    category: ActivityCategory
    _version: Int
}

input DeleteActivityInput {
    id: ID!
    _version: Int
}

input ModelSubscriptionActivityFilterInput {
    id: ModelSubscriptionIDInput
    activityName: ModelSubscriptionStringInput
    tripID: ModelSubscriptionIDInput
    activityImageUrl: ModelSubscriptionStringInput
    activityImageKey: ModelSubscriptionStringInput
    activityDate: ModelSubscriptionStringInput
    activityTime: ModelSubscriptionStringInput
    category: ModelSubscriptionStringInput
    and: [ModelSubscriptionActivityFilterInput]
    or: [ModelSubscriptionActivityFilterInput]
}

input ModelStringKeyConditionInput {
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    between: [String]
    beginsWith: String
}

