
type Trip @aws_iam @aws_cognito_user_pools {
    id: ID!
    tripName: String!
    destination: String!
    startDate: AWSDate!
    endDate: AWSDate!
    tripImageUrl: String
    tripImageKey: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTripConnection @aws_iam @aws_cognito_user_pools {
    items: [Trip]!
    nextToken: String
    startedAt: AWSTimestamp
}

input ModelTripFilterInput {
  id: ModelIDInput
  tripName: ModelStringInput
  destination: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  tripImageUrl: ModelStringInput
  tripImageKey: ModelStringInput
  and: [ModelTripFilterInput]
  or: [ModelTripFilterInput]
  not: ModelTripFilterInput
}

type Query {
    getTrip(id: ID!): Trip @aws_iam @aws_cognito_user_pools
    listTrips(filter: ModelTripFilterInput, limit: Int, nextToken: String): ModelTripConnection @aws_iam @aws_cognito_user_pools
    syncTrips(filter: ModelTripFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTripConnection @aws_iam @aws_cognito_user_pools
}

input ModelTripConditionInput {
  tripName: ModelStringInput
  destination: ModelStringInput
  startDate: ModelStringInput
  endDate: ModelStringInput
  tripImageUrl: ModelStringInput
  tripImageKey: ModelStringInput
  and: [ModelTripConditionInput]
  or: [ModelTripConditionInput]
  not: ModelTripConditionInput
}

input CreateTripInput {
  id: ID
  tripName: String!
  destination: String!
  startDate: AWSDate!
  endDate: AWSDate!
  tripImageUrl: String
  tripImageKey: String
  _version: Int
}

input UpdateTripInput {
  id: ID!
  tripName: String
  destination: String
  startDate: AWSDate
  endDate: AWSDate
  tripImageUrl: String
  tripImageKey: String
  _version: Int
}

input DeleteTripInput {
  id: ID!
  _version: Int
}

type Mutation {
    createTrip(input: CreateTripInput!, condition: ModelTripConditionInput): Trip @aws_iam @aws_cognito_user_pools
    updateTrip(input: UpdateTripInput!, condition: ModelTripConditionInput): Trip @aws_iam @aws_cognito_user_pools
    deleteTrip(input: DeleteTripInput!, condition: ModelTripConditionInput): Trip @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionTripFilterInput {
  id: ModelSubscriptionIDInput
  tripName: ModelSubscriptionStringInput
  destination: ModelSubscriptionStringInput
  startDate: ModelSubscriptionStringInput
  endDate: ModelSubscriptionStringInput
  tripImageUrl: ModelSubscriptionStringInput
  tripImageKey: ModelSubscriptionStringInput
  and: [ModelSubscriptionTripFilterInput]
  or: [ModelSubscriptionTripFilterInput]
}

type Subscription {
    onCreateTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["createTrip"]) @aws_iam @aws_cognito_user_pools
    onUpdateTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["updateTrip"]) @aws_iam @aws_cognito_user_pools
    onDeleteTrip(filter: ModelSubscriptionTripFilterInput, owner: String): Trip @aws_subscribe(mutations: ["deleteTrip"]) @aws_iam @aws_cognito_user_pools
}

